# -*- coding: utf-8 -*-
"""avatar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1torCwxKU9GuWcoS6E07-QnQk8pjvF87Z
"""

!pip install -q diffusers transformers accelerate torch gradio
!pip install -q xformers  # Optional for faster inference

import os
from google.colab import files
import shutil
from IPython.display import clear_output

# Create folder for user images
os.makedirs("user_images", exist_ok=True)

# Initialize counter
upload_count = 0

# Clear existing files in directory
for f in os.listdir("user_images"):
    os.remove(os.path.join("user_images", f))

while True:
    try:
        # Upload images
        clear_output()
        print(f"Upload exactly 5 images ({upload_count}/5 uploaded)")
        uploaded = files.upload()

        # Validate count
        if len(uploaded) + upload_count > 5:
            print(f"Error: You uploaded {len(uploaded)} images. Total should be exactly 5.")
            continue

        # Validate file types
        valid_extensions = ['.jpg', '.jpeg', '.png', '.webp']
        for filename in uploaded.keys():
            if not any(filename.lower().endswith(ext) for ext in valid_extensions):
                raise ValueError(f"Invalid file type: {filename}. Only images allowed (jpg, png, webp)")

        # Move valid files
        for filename in uploaded.keys():
            shutil.move(filename, os.path.join("user_images", filename))

        upload_count += len(uploaded)

        if upload_count == 5:
            print("Success! 5 images uploaded")
            break

    except Exception as e:
        print(f"Error: {str(e)}")
        # Reset on error
        for f in uploaded.keys():
            if os.path.exists(f):
                os.remove(f)
        upload_count = 0
        continue

print("\nUploaded images:")
!ls user_images

from diffusers import DiffusionPipeline, StableDiffusionPipeline
import torch

# Load Stable Diffusion model
model_id = "runwayml/stable-diffusion-v1-5"
pipe = DiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16).to("cuda")

# Configure DreamBooth training
pipe.unet.train()
pipe.text_encoder.train()

# Training settings (adjust based on your needs)
training_steps = 800
learning_rate = 2e-6

# Train on user images (simplified example)
# Note: For full DreamBooth, use a script like https://github.com/huggingface/diffusers/tree/main/examples/dreambooth
for step in range(training_steps):
    # Load a batch of user images
    # Add your training loop here (see Hugging Face DreamBooth example for details)
    pass

# Save the fine-tuned model
pipe.save_pretrained("fine_tuned_superman")

# inference and seed

import gradio as gr

def generate_avatar(prompt):
    # Load the fine-tuned model
    pipe = StableDiffusionPipeline.from_pretrained("fine_tuned_superman", torch_dtype=torch.float16).to("cuda")

    # Generate the image
    image = pipe(prompt).images[0]
    return image

# Gradio UI
gr.Interface(
    fn=generate_avatar,
    inputs=gr.Textbox(label="Enter prompt (e.g., 'realistic Superman avatar')"),
    outputs=gr.Image(label="Generated Avatar"),
).launch()



